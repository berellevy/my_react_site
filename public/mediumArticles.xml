<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Berel Levy on Medium]]></title>
        <description><![CDATA[Stories by Berel Levy on Medium]]></description>
        <link>https://medium.com/@berellevy?source=rss-146d214c3779------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*j7D8aH-0H3AvuFTi708ykg.jpeg</url>
            <title>Stories by Berel Levy on Medium</title>
            <link>https://medium.com/@berellevy?source=rss-146d214c3779------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Wed, 24 Jul 2024 16:32:04 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@berellevy/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[HTMX + 3rd Party Libraries The Easy Way.]]></title>
            <link>https://blog.stackademic.com/htmx-3rd-party-libraries-the-easy-way-6b83601e8b95?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/6b83601e8b95</guid>
            <category><![CDATA[htmx]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[html]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Wed, 22 May 2024 22:10:17 GMT</pubDate>
            <atom:updated>2024-05-22T23:51:41.803Z</atom:updated>
            <content:encoded><![CDATA[<p><em>Easily activate HTMX on all elements added to the DOM by 3rd party libraries etc. with one simple code¬†snippet.</em></p><h3>The TL;DR</h3><p>If you just want to solution, here it is. Run this code snippet once on page-load to call htmx.process(el) on every element subsequently added to the DOM not by¬†htmx.</p><pre>const observer = new MutationObserver((mutations) =&gt; {<br>  mutations.forEach((mutation) =&gt; {<br>    mutation.addedNodes.forEach((node) =&gt; {<br>      if (node.nodeType === 1 &amp;&amp; !node[&quot;htmx-internal-data&quot;]) {<br>        htmx.process(node)<br>      }<br>    })<br>  })<br>})<br>observer.observe(document, {childList: true, subtree: true})</pre><p>If you want to better understand how this works, and to improve your knowledge of htmx and the DOM in general, read¬†on.</p><h3>The Full Explanation</h3><p>NOTE: This article assumes you use htmx and have at least basic knowledge of how it works. For a tutorial the <a href="https://htmx.org/docs/">docs</a> are excellent.</p><p>Whenever an element is added to DOM, htmx runshtmx.process(el) on the element to register it and store some metadata on the element so that htmx can work it‚Äôs ajax goodness when called upon later (read: when clicked). htmx.process(el) runs in two situations:</p><ol><li>On initial page¬†load.</li><li>2. When an element is added to the DOM by¬†htmx.</li></ol><p>But htmx has no way of knowing when an element has been added to the DOM by a 3rd party library or by your¬†code.</p><p>To fix this you can run htmx.process(el) manually on every element that your code adds to the DOM. Read more about this in the htmx docs <a href="https://htmx.org/docs/#3rd-party">here</a>. This works perfectly of course, but it can be tedious and error prone. And it can sometimes be convoluted to intercept an element added by a 3rd party¬†library.</p><p>It would be much better if we could just watch the dom for changes and run htmx.process(el) whenever an element is added to the¬†DOM.</p><h3>MutationObserver</h3><p>Luckily, the browser offers us the MutationObserver <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">API</a>, which allows us to listen for any changes to a DOM element just like we can listen to events. Changes¬†include:</p><ol><li>Child elements added or¬†removed.</li><li>Changes to the text inside an¬†element.</li><li>Changes to an element‚Äôs attributes.</li></ol><p>We can then run any code we like on those elements.</p><h3>Try it¬†Out.</h3><p>Let‚Äôs see the MutationObserver in action. If you are reading this on desktop, open the console and run this code¬†snippet:</p><pre>new MutationObserver((mrs) =&gt; console.log(mrs)).observe(document, { childList: true, subtree: true })</pre><p>This will register a MutationObserver that will log all MutationEvents to the console. Select some text in this article. You should see some MutationRecords logged. Every time you select some text in a medium article, some JS adds those elements to the DOM, and removes them from the DOM when the text is unselected.</p><p>If you drill down into a MutationRecord, you‚Äôll see a property called addedNodes which contains the elements that were¬†added.</p><p>Let‚Äôs take a slightly more in depth look into how MutationObserver works.</p><p>First we create a new mutation observer. It takes one argument, a callback function that will run for every mutation event. The callback receives one argument, mutationRecords; which is an array containing one or more objects. Each object contains information about a mutation that has taken place. Let‚Äôs just log the mutationRecords argument to the console for¬†now.</p><pre>const observer = new MutationObserver((mutationRecords) =&gt; {<br>  console.log({mutationRecords})<br>})</pre><p>If you run this code, nothing will happen, because this observer needs something to observe. Let‚Äôs give it something to observe by calling it‚Äôs observe method. This method takes two arguments: target and options. target is the element we will er, observe, and options, well you probably know what options are. let‚Äôs add the the observer to our code and then I‚Äôll explain which options we need to¬†use.</p><pre>const observer = new MutationObserver((mutationRecords) =&gt; {<br>  console.log({mutationRecords})<br>})<br>observer.observe(document, { childList: true, subtree: true })     // NEW<br>// note: you can test this code in the console.</pre><p>We pass 2 parameters in options; childList: true and subtree: true. They sound similar but are actually quite different.</p><p>childList: true tells the observer what <em>type of changes</em> we want to observe. In our case we want to observe our target element, the document, for any <em>added or removed child nodes </em>(elements are nodes, but nodes can also be other things). we can then access those nodes in mutationRecord.addedNodes, and mutationRecord.removedNodes, respectively, in the callback function.</p><p>By the way, we can also observe the target for <em>attribute changes</em> (e.g. class or id) and <em>text changes</em> but we won‚Äôt explore those in this¬†article.</p><p>subtree: true tells the observer to <em>also watch all of the target‚Äôs descendent nodes</em> for these changes as well, not just the¬†target.</p><p>In summary, our callback will now run whenever any elements are added to the DOM. Now, let‚Äôs run some code on those elements.</p><h3>Watch it,¬†htmx</h3><p>The mutationRecords argument is an array of MutationRecord objects. let‚Äôs loop through them now and log each one separately.</p><pre>const observer = new MutationObserver((mutationRecords) =&gt; {<br>  mutationRecords.forEach((mutationRecord) =&gt; {               // NEW<br>    console.log(mutationRecord)                               // NEW<br>  })                                                          // NEW<br>})<br>observer.observe(document, { childList: true, subtree: true })<br>// note: you can test this code in the console.</pre><p>Each MutationRecord object has a property called addedNodes: a nodeList of all the nodes that were added in this mutation, but you could have guessed that yourself. Let‚Äôs loop through that and log each node¬†now.</p><pre>const observer = new MutationObserver((mutationRecords) =&gt; {<br>  mutationRecords.forEach((mutationRecord) =&gt; {              <br>    mutationRecord.addedNodes.forEach((node) =&gt; {            // NEW<br>      console.log(node)                                      // NEW<br>    })                                                       // NEW<br>  })                      <br>})<br>observer.observe(document, { childList: true, subtree: true })<br>// note: you can test this code in the console.</pre><p>Finally, let‚Äôs run htmx.process(el) on any elements that need¬†it.</p><pre>const observer = new MutationObserver((mutationRecords) =&gt; {<br>  mutationRecords.forEach((mutationRecord) =&gt; {<br>    mutationRecord.addedNodes.forEach((node) =&gt; {               <br>      if (node.nodeType === 1 &amp;&amp; !node[&quot;htmx-internal-data&quot;]) {  // NEW<br>        htmx.process(node)                                       // NEW<br>      }                                                          // NEW<br>    })<br>  })<br>})<br>observer.observe(document, { childList: true, subtree: true })<br>// NOTE: this code needs htmx to run.</pre><p>First we check for nodes that are DOM elements (node type 1, <a href="https://www.w3schools.com/xml/dom_nodetype.asp">read more</a>), then we check that the element wasn‚Äôt added by htmx, which adds the htmx-internal-data attribute to elements. For all nodes that match, we run htmx.process(node) and these elements are good to¬†go!</p><p>I hope you enjoyed this article. Happy¬†coding.</p><h3>Stackademic üéì</h3><p>Thank you for reading until the end. Before you¬†go:</p><ul><li>Please consider <strong>clapping</strong> and <strong>following</strong> the writer!¬†üëè</li><li>Follow us <a href="https://twitter.com/stackademichq"><strong>X</strong></a><strong> | </strong><a href="https://www.linkedin.com/company/stackademic"><strong>LinkedIn</strong></a><strong> | </strong><a href="https://www.youtube.com/c/stackademic"><strong>YouTube</strong></a><strong> |¬†</strong><a href="https://discord.gg/in-plain-english-709094664682340443"><strong>Discord</strong></a></li><li>Visit our other platforms: <a href="https://plainenglish.io"><strong>In Plain English</strong></a><strong> | </strong><a href="https://cofeed.app/"><strong>CoFeed</strong></a><strong> | </strong><a href="https://venturemagazine.net/"><strong>Venture</strong></a><strong> |¬†</strong><a href="https://blog.cubed.run"><strong>Cubed</strong></a></li><li>Tired of blogging platforms that force you to deal with algorithmic content? Try¬†<a href="https://differ.blog/"><strong>Differ</strong></a></li><li>More content at <a href="https://stackademic.com"><strong>Stackademic.com</strong></a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6b83601e8b95" width="1" height="1" alt=""><hr><p><a href="https://blog.stackademic.com/htmx-3rd-party-libraries-the-easy-way-6b83601e8b95">HTMX + 3rd Party Libraries The Easy Way.</a> was originally published in <a href="https://blog.stackademic.com">Stackademic</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Out-Of-This-World Django DX]]></title>
            <link>https://blog.stackademic.com/out-of-this-world-django-dx-e26612a38fd6?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/e26612a38fd6</guid>
            <category><![CDATA[python]]></category>
            <category><![CDATA[django]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[jupyter-notebook]]></category>
            <category><![CDATA[coding]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Tue, 07 May 2024 00:22:15 GMT</pubDate>
            <atom:updated>2024-05-07T00:25:52.698Z</atom:updated>
            <content:encoded><![CDATA[<p>How to set up the Jupyter Notebook VSCode extension in¬†Django.</p><h3>What‚Äôs Wrong with Earth‚Äôs¬†Shell?</h3><p>Testing code in the shell is a necessary part of django development, that goes without saying. But it‚Äôs an experience that leaves you wanting. The improvements suggested in <a href="https://adamchainz.gumroad.com/l/byddx">Boost Your Django DX</a> (Great book. Read it.) help a lot, but there‚Äôs something even¬†better.</p><p>Imagine you could run your code right inside the file you‚Äôre editing! You get access to all the benefits available in your editor (intellisense, ctrl+clicking, etc.) and run it right then and there, fast as a repl. You can all this and more, with Jupyter Notebook.</p><h3>Server or¬†Plugin?</h3><p>Jupyter Notebook comes in two flavors; as a <strong>web page</strong> and as an integrated <strong>VSCode plugin</strong>. The web page version is easier to get started with but the plugin version is much better. I‚Äôll be showing you how to use the plugin version because that‚Äôs what I like, and there‚Äôs already an article that shows you how to set up the web page version: <a href="https://medium.com/ayuth/how-to-use-django-in-jupyter-notebook-561ea2401852">How to use Django in Jupyter Notebook</a> by <a href="https://medium.com/@ayuthmang">Ayuth Mangmesap</a>.</p><h3>Getting Started.</h3><p>Make sure you have VSCode installed.</p><p>1. Install the <a href="https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter">Jupyter VSCode Extension</a></p><p>2. Make sure you have a virtual environment set up. If you don‚Äôt you can set one up by typingpython -m venv¬†.venv into your terminal.</p><p>3. Next, install the Jupyter python library by typing pip install jupyter into your terminal.</p><p>4. Open the VSCode command palette (‚áß‚åòP on mac, ctrl+shift+p on windows) and choose the <strong>Python: Select Interpreter</strong> command.</p><p>4a. Choose the interpreter from your virtual environment. It will be something like path-to-your-venv/bin/python, if you created the virtual environment using python -m venv¬†.venv it should look like the selection below.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dCTCy9IqyLQCP5Co0OlHrw.png" /></figure><p>Your Jupyter Notebook will use this interpreter and stay in sync with your project‚Äôs dependencies.</p><p>5. Create a jupyter notebook file like dev.ipynb in the root directory of your django project, next to your manage.py file. Since you‚Äôll be using this file in dev it‚Äôs a good idea to add it to your¬†.gitignore.</p><p>5a. Open the dev.ipynb file. It should look like¬†this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1FsPnWrp8-acRA5rZvmnSA.png" /><figcaption>A Fresh Jupyter Notebook in¬†vscode</figcaption></figure><p>6. Click on the <strong>Select Kernel</strong> button, in the top right corner of the open Notebook.</p><p>6a. Select the <strong>Python Environments‚Ä¶</strong> option. Then choose your project‚Äôs virtual environment. It‚Äôs the same one you chose in the <strong>Python: Select Interpreter</strong> menu¬†above.</p><p>Congratulations! You‚Äôve set up Jupyter Notebook. You should now be able to run vanilla python in it, try something simple, like a print statement.</p><h3>Using Django in Your Jupyter Notebook.</h3><p>If you try to do anything Django-related you‚Äôll get an error like <br>ImproperlyConfigured: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings. This is because a lot of setup happens when django starts up when you run python manage.py COMMAND and we‚Äôll need to replicate this in the beginning of our Notebook to access all our Django¬†stuffs.</p><p>Add the following code to the first¬†cell:</p><pre>import os, django <br>os.environ[&quot;DJANGO_SETTINGS_MODULE&quot;] = &quot;&lt;your.settings.module&gt;&quot; <br>os.environ[&quot;DJANGO_ALLOW_ASYNC_UNSAFE&quot;] = &quot;true&quot;              <br>django.setup()</pre><p>The last line, django.setup() is the magic command that does what is says it does. This is what gets called early on when you run manage.py COMMAND.</p><p>The line above that, os.environ[‚ÄúDJANGO_ALLOW_ASYNC_UNSAFE‚Äù] = ‚Äútrue‚Äù ensures that the ORM works smoothly in Jupyter Notebook. I won‚Äôt get into it here, but in short, Jupyter is async and the ORM isn‚Äôt. Just be carefull, don‚Äôt change this setting in your settings file because it‚Äôs bad for production.</p><p>The first two lines are pretty self explanatory.</p><h3>Test it¬†Out!</h3><p>You can now test some Django code in Notebook and it will run properly, just like it would in the¬†shell.</p><h3>Autoreload</h3><p>Add the following code above the django related code at the beginning of the first cell of your jupyter notebook:</p><pre>%reload_ext autoreload        # NEW<br>%autoreload 2                 # NEW<br><br>import os, django <br>os.environ[&quot;DJANGO_SETTINGS_MODULE&quot;] = &quot;&lt;your.settings.module&gt;&quot; <br>os.environ[&quot;DJANGO_ALLOW_ASYNC_UNSAFE&quot;] = &quot;true&quot;              <br>django.setup()</pre><p>This will reload everything whenever you change something in another file, similar to how runserver reloads when you change something. Unlike runserver however, you don‚Äôt lose all your variables. Also, since Django runs a lot of setup in the beginning, sometimes you‚Äôll need to restart the whole Notebook from fresh. You can do this by clicking on the restart button on the top of the Notebook.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9aUkSa0fMXHGOOiyUaBWrw.png" /><figcaption>Restart is the solution to most problems anyway¬†tbh</figcaption></figure><p>That‚Äôs it. Happy coding, and I‚Äôll leave you to get aquainted with the joys of Jupyter NoteBook.</p><p>Check out <a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">https://code.visualstudio.com/docs/datascience/jupyter-notebooks</a> for more info on customizing the Jupyter VSCode extension.</p><h3>Stackademic üéì</h3><p>Thank you for reading until the end. Before you¬†go:</p><ul><li>Please consider <strong>clapping</strong> and <strong>following</strong> the writer!¬†üëè</li><li>Follow us <a href="https://twitter.com/stackademichq"><strong>X</strong></a><strong> | </strong><a href="https://www.linkedin.com/company/stackademic"><strong>LinkedIn</strong></a><strong> | </strong><a href="https://www.youtube.com/c/stackademic"><strong>YouTube</strong></a><strong> |¬†</strong><a href="https://discord.gg/in-plain-english-709094664682340443"><strong>Discord</strong></a></li><li>Visit our other platforms: <a href="https://plainenglish.io"><strong>In Plain English</strong></a><strong> | </strong><a href="https://cofeed.app/"><strong>CoFeed</strong></a><strong> | </strong><a href="https://venturemagazine.net/"><strong>Venture</strong></a><strong> |¬†</strong><a href="https://blog.cubed.run"><strong>Cubed</strong></a></li><li>More content at <a href="https://stackademic.com"><strong>Stackademic.com</strong></a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e26612a38fd6" width="1" height="1" alt=""><hr><p><a href="https://blog.stackademic.com/out-of-this-world-django-dx-e26612a38fd6">Out-Of-This-World Django DX</a> was originally published in <a href="https://blog.stackademic.com">Stackademic</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Adding Star Power to Django QuerySets]]></title>
            <link>https://blog.stackademic.com/adding-star-power-to-django-querysets-e939bbb503a8?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/e939bbb503a8</guid>
            <category><![CDATA[sql]]></category>
            <category><![CDATA[python]]></category>
            <category><![CDATA[django]]></category>
            <category><![CDATA[queryset]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Mon, 22 Apr 2024 21:47:49 GMT</pubDate>
            <atom:updated>2024-05-06T01:00:45.018Z</atom:updated>
            <content:encoded><![CDATA[<p>Adding the convenience of SQL‚Äôs SELECT * to Django‚Äôs QuerySet.values().</p><p>It‚Äôs a story is as old as time itself, you‚Äôre browsing a model‚Äôs data and you don‚Äôt want to type out every column name, so you leave qs.values() empty. Everything‚Äôs peachy, until you want to also include a column from a related model. Uh oh, when you add it, qs.values() only returns that column! Now you have to write all the column names of the first model as¬†well.</p><p>What to do? If only there were a way to add that ability to the qs.values()method‚Ä¶</p><p>There is a way! Using basic inheritance you can override Django‚Äôs QuerySet methods and add new functionality, like accepting a &quot;*‚Äù for example. Let‚Äôs learn¬†how.</p><h3>Overriding the base¬†model.</h3><p>Since all your models inherit from Django‚Äôs models.Model already, you can easily create your own custom base model and all the models in your project can inherit from it instead. Let‚Äôs start creating our own BaseModel in a new file we‚Äôll call base_model.py.</p><pre># base_model.py<br>from django.db import models<br><br>class BaseModel(models.Model):<br>  <br>    class Meta:<br>        abstract = True # this ensures no migrations will be created.</pre><p>Now all the models in your project can safely inherit from this BaseModel instead of Django‚Äôs models.Model. For¬†Example:</p><pre># main/app/models.py<br><br>from django.db import Models<br>from base_model import BaseModel<br><br>class MyFirstModel(BaseModel)<br>    field1 = models.CharField(<br>        max_length=255, <br>        default=&quot;Look ma, no input!&quot;<br>    )</pre><p>MyFirstModel&#39;s behavior won‚Äôt change at all since it gets all the models.Model functionality through BaseModel. Better still, you can try adding a custom method to BaseModel and testing it on your¬†model.</p><h3>Adding a BaseManager and BaseQueryset.</h3><p>Since¬†.values() is a QuerySet method, we‚Äôll have to override the default QuerySet and have our BaseModel use that one. Lets add some code to base_model.py above our BaseModel definition.</p><pre># base_model.py<br>from django.db import models<br><br>class BaseManager(models.Manager):    # NEW<br>    pass                              # NEW<br><br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()           # NEW<br><br>    class Meta:<br>        abstract = True</pre><p>Wait, weren‚Äôt we adding a queryset? Why is it called Manager? Unfortunately, in Django, models don‚Äôt have QuerySets. They have Managers, and Managers have QuerySets. I don‚Äôt know why we need the Manager in the middle, in fact I think he‚Äôs only a manager because he‚Äôs related to someone. But, this is how it‚Äôs done, so let‚Äôs bear it. Now let‚Äôs finally add our custom BaseQuerySet to the manager so we can get to the fun part, adding custom QuerySet¬†methods!</p><pre># base_model.py<br><br>from django.db import models<br><br>class BaseQuerySet(models.QuerySet):                       # NEW<br>    pass                                                   # NEW<br>    # fun stuff goes here.<br><br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:                # NEW<br>        return BaseQueryset(self.model, using=self._db)    # NEW<br><br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><h3>SQL, the Gold Standard.</h3><p>The behavior we‚Äôre gonna add is similar to SQL‚Äôs SELECT *. the * represents all the columns in a given table, but you can still specify individual columns by name as well, so SELECT col1, * FROM tbl1 will return col1, followed by all the columns of tbl1. Conversely, SELECT *, col1 FROM tbl1 will select all the columns of tbl1 followed by¬†col1.</p><p>So what we‚Äôre looking to do is override the qs.values() method before is it actually goes and fetches any data and have it check to see if any of the args passed in are a ‚Äú*‚Äù and then replace that arg with all the column names of the¬†model.</p><p>First, let‚Äôs override the qs.values() method to see where exactly we will do all¬†this.</p><pre># base_model.py<br><br>from django.db import models<br><br>class BaseQuerySet(models.QuerySet):<br>    def values(self, *fields, **expressions):              # NEW<br>        # change *fields here<br>        # and then pass on to super.<br>        return super().values(*fields, **expressions)      # NEW<br><br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>As you can see in the code above, before we call super().values(), we can make changes to¬†*fields.</p><p>Let‚Äôs break down what we want to do, in pseudo-code, if you¬†will.</p><ul><li>Get a list of all the column names for our¬†model</li><li>Check *fields for an arg that is¬†‚Äú*‚Äù</li><li>Replace that arg with the list of our model‚Äôs column¬†names</li></ul><h3>Getting a List of Our Model‚Äôs Column¬†Names</h3><p>First we need to get a list of all the model‚Äôs column names. here‚Äôs how: Model._meta.fields returns a list of the field objects that belong to this model. Each field object has a name property which returns a string of the fields¬†name.</p><p>Try this out in the shell: [f.name for f in MyFirstModel._meta.fields].</p><p>Now that we know how to get this list from the model, let‚Äôs get access to it inside the queryset. Accessing the model inside the queryset is easy because when the queryset is instantiated, the model is passed in as a property. So we can access it as self.model. Let‚Äôs add a calculated property to our BaseQuerySet called _column_names.</p><pre>queeeee# base_model.py<br><br>from django.db import models<br><br>class BaseQuerySet(models.QuerySet):<br>    @property                                               # NEW<br>    def _column_names(self) -&gt; list[str]:                   # NEW<br>        return [f.name for f in self.model._meta.fields]    # NEW<br><br>    def values(self, *fields, **expressions):<br>        # change *fields here<br>        # and then pass on to super.<br>        return super().values(*fields, **expressions)<br><br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>Since _column_names is an convenience method only meant to break up the logic into smaller parts and is not meant to be used outside the object we we add an underscore prefix to the property¬†name.</p><h3>Checking for ‚Äú*‚Äù in¬†*fields</h3><p>Now the fun starts. Let‚Äôs add some code that does two things. <strong>1)</strong> print *fields every time we call qs.values(). <strong>2)</strong> remove the ‚Äú*‚Äù from *fields. Since it‚Äôs not one of the recognized model fields, passing a ‚Äú*‚Äù to super().values() will raise an error. NOTE: Since¬†.values() is a core QuerySet method, we need to be VEEEERRRRRYYYY careful when we override¬†it.</p><pre># base_model.py<br><br>from django.db import models<br><br>class BaseQuerySet(models.QuerySet):<br>    @property<br>    def _column_names(self) -&gt; list[str]:<br>        return [f.name for f in self.model._meta.fields]<br><br>    def values(self, *fields, **expressions):<br>        print(fields)                                 # NEW<br>        fields = [f for f in fields if f != &quot;*&quot;]      # NEW<br>        return super().values(*fields, **expressions)<br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>And test it. Be sure to test different scenarios to make sure that qs.values() still works as expected.</p><h3>Replacing ‚Äú*‚Äù With the Model‚Äôs Column¬†Names</h3><p>Before we go ahead and actually replace the ‚Äú*‚Äù, let‚Äôs just confirm that we have access to the model‚Äôs column names inside the¬†.values() method. This might seem unnecessary, but since we‚Äôre elbow deep in Django‚Äôs innards, it pays not to take anything for¬†granted.</p><pre># base_model.py<br><br>from django.db import models<br><br>class BaseQuerySet(models.QuerySet):<br>    @property<br>    def _column_names(self) -&gt; list[str]:<br>        return [f.name for f in self.model._meta.fields]<br><br>    def values(self, *fields, **expressions):<br>        print(self._column_names)                      # CHANGED<br>        fields = [f for f in fields if f != &quot;*&quot;]      <br>        return super().values(*fields, **expressions)<br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>Go ahead and test out¬†.values() again to see if it prints out the list of column names successfully.</p><p>Next, let‚Äôs replace the ‚Äú*‚Äù in *fields with self._column_names. We‚Äôll make a small change in the list comprehension to insert self._column_names when we remove the ‚Äú*‚Äù. Let‚Äôs also remove print(self._column_names) and add a print statement below the list comprehension to see our combined¬†lists.</p><pre># base_model.py<br><br>from django.db import models<br><br>class BaseQuerySet(models.QuerySet):<br>    @property<br>    def _column_names(self) -&gt; list[str]:<br>        return [f.name for f in self.model._meta.fields]<br><br>    def values(self, *fields, **expressions):              <br>        fields = [                                   # CHANGED<br>            f for f in fields                        # CHANGED<br>            if f != &quot;*&quot; else self._column_names      # CHANGED<br>        ]                                            # CHANGED<br>        print(fields)                                # NEW<br>        return super().values(*fields, **expressions)<br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>‚Ä¶and test that as well. Two things should happen, first, you should see the combined list of fields printed out, and second, you should get an error TypeError: unhashable type: ‚Äòlist‚Äô. If look closely at the at the printed fields, you‚Äôll notice that the ‚Äú*‚Äù was replaced with a <em>list</em> of strings, and qs.values() only accepts strings in *fields, not¬†lists.</p><p>To fix this we‚Äôll define a function named flatten that flattens nested lists and use said function to flatten fields before we pass it to super().values() (that was starting to feel redundant). I won‚Äôt get into the nuances of how the flatten function works but I do recommend you read <a href="https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/">Fluent Python</a> by Luciano Ramalho (pronounced ‚ÄúHah-MAHL-yu‚Äù, I believe) and <a href="https://www.oreilly.com/library/view/python-cookbook-3rd/9781449357337/">Python Cookbook</a> by David Beazley and Brian K. Jones to learn about that and much more. Actually I highly recommend you read through both of those books as they will give you a deep understanding of many of the most important aspects of¬†python.</p><p>Let‚Äôs first add the function and test it out to confirm that it¬†works.</p><pre># base_model.py<br><br>from django.db import models<br>from typing import Iterable                                       # NEW<br><br>def flatten(iterable: Iterable):                                  # NEW #<br>    &quot;&quot;&quot;Flatten arbitrarily nested iterables.&quot;&quot;&quot;                         #<br>    for i in iterable:                                                  #<br>        if isinstance(i, Iterable) and not isinstance(i, (str, bytes)): #<br>            yield from flatten(i)                                       #<br>        else:                                                           #<br>            yield i                                               # NEW #<br><br><br>class BaseQuerySet(models.QuerySet):<br>    @property<br>    def _column_names(self) -&gt; list[str]:<br>        return [f.name for f in self.model._meta.fields]<br><br>    def values(self, *fields, **expressions):              <br>        fields = [<br>            f for f in fields<br>            if f != &quot;*&quot; else self._column_names<br>        ]<br>        return super().values(*fields, **expressions)<br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>Test the flatten function as follows: flatten([&quot;a&quot;, [&quot;b&quot;]]) and it should output &lt;generator object flatten at 0x00MEMADDRESS&gt;, so pass it to list: list(flatten([‚Äúa‚Äù, [‚Äúb‚Äù]])) and it should output a flat list [&quot;a&quot;,¬†&quot;b&quot;].</p><p>Once we‚Äôve confirmed that flatten works properly, let‚Äôs use it in qs.values()!</p><pre># base_model.py<br><br>from django.db import models<br>from typing import Iterable<br><br>def flatten(iterable: Iterable):<br>    &quot;&quot;&quot;Flatten arbitrarily nested iterables.&quot;&quot;&quot;<br>    for i in iterable:<br>        if isinstance(i, Iterable) and not isinstance(i, (str, bytes)):<br>            yield from flatten(i)<br>        else:<br>            yield i<br><br><br>class BaseQuerySet(models.QuerySet):<br>    @property<br>    def _column_names(self) -&gt; list[str]:<br>        return [f.name for f in self.model._meta.fields]<br><br>    def values(self, *fields, **expressions):              <br>        fields = [<br>            f for f in fields<br>            if f != &quot;*&quot; else self._column_names<br>        ]<br>        fields = list(flatten(fields))                  # NEW<br>        return super().values(*fields, **expressions)<br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>That‚Äôs it! you can now pass a ‚Äú*‚Äù to qs.values() and it should work as expected!</p><p>One more thing. It‚Äôs never a good idea to use a SELECT * query in production. Instead, always specify every column you need in your queries. I recommend you only enable this in dev mode. To achieve that let‚Äôs test for Django‚Äôs DEBUG mode before allowing this code to¬†run.</p><pre># base_model.py<br><br>from typing import Iterable<br>from django.db import models<br>from djang.conf import settings                          # NEW<br><br>def flatten(iterable: Iterable):<br>    &quot;&quot;&quot;Flatten arbitrarily nested iterables.&quot;&quot;&quot;<br>    for i in iterable:<br>        if isinstance(i, Iterable) and not isinstance(i, (str, bytes)):<br>            yield from flatten(i)<br>        else:<br>            yield i<br><br>class BaseQuerySet(models.QuerySet):<br>    @property<br>    def _column_names(self) -&gt; list[str]:<br>        return [f.name for f in self.model._meta.fields]<br><br>    def values(self, *fields, **expressions):<br>        if settings.DEBUG:                                # NEW<br>            fields = [<br>                f for f in fields<br>                if f != &quot;*&quot; else self._column_names<br>            ]<br>        fields = list(flatten(fields))<br>        return super().values(*fields, **expressions)<br><br><br>class BaseManager(models.Manager):<br>    def get_queryset(self) -&gt; BaseQuerySet:<br>        return BaseQueryset(self.model, using=self._db)<br><br><br>class BaseModel(models.Model):<br><br>    objects = BaseManager()<br><br>    class Meta:<br>        abstract = True</pre><p>Have fun. I hope you enjoyed this article. Please feel free to leave comments and questions, I‚Äôll try to respond to everything.</p><h3>Stackademic üéì</h3><p>Thank you for reading until the end. Before you¬†go:</p><ul><li>Please consider <strong>clapping</strong> and <strong>following</strong> the writer!¬†üëè</li><li>Follow us <a href="https://twitter.com/stackademichq"><strong>X</strong></a><strong> | </strong><a href="https://www.linkedin.com/company/stackademic"><strong>LinkedIn</strong></a><strong> | </strong><a href="https://www.youtube.com/c/stackademic"><strong>YouTube</strong></a><strong> |¬†</strong><a href="https://discord.gg/in-plain-english-709094664682340443"><strong>Discord</strong></a></li><li>Visit our other platforms: <a href="https://plainenglish.io"><strong>In Plain English</strong></a><strong> | </strong><a href="https://cofeed.app/"><strong>CoFeed</strong></a><strong> | </strong><a href="https://venturemagazine.net/"><strong>Venture</strong></a><strong> |¬†</strong><a href="https://blog.cubed.run"><strong>Cubed</strong></a></li><li>More content at <a href="https://stackademic.com"><strong>Stackademic.com</strong></a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e939bbb503a8" width="1" height="1" alt=""><hr><p><a href="https://blog.stackademic.com/adding-star-power-to-django-querysets-e939bbb503a8">Adding Star Power to Django QuerySets</a> was originally published in <a href="https://blog.stackademic.com">Stackademic</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Pause/Play YouTube with Your Keyboard!!!]]></title>
            <link>https://berellevy.medium.com/pause-play-youtube-with-your-keyboard-b747029f9f4a?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/b747029f9f4a</guid>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Wed, 28 Oct 2020 20:48:33 GMT</pubDate>
            <atom:updated>2020-10-28T20:48:33.874Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*qD3DQiOmeXDDIQWb0upr2Q.png" /></figure><h3>Let‚Äôs make a keyboard shortcut that you can click in any active window that will pause your YouTube tutorial.</h3><h3>Step 1. Get the Chrome Extension</h3><p>Add the Streamkeys chrome extension. download it¬†<a href="https://chrome.google.com/webstore/detail/streamkeys/ekpipjofdicppbepocohdlgenahaneen">here</a>.</p><h3>Click on the extension and go to settings.</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*qnAxt8NY_qlvTXoltRlUVA.gif" /></figure><h3>In the settings page, click the ‚Äògeneral‚Äô section of the¬†sidebar.</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*Loq-TTqeH0qaxY2ItHHacA.gif" /></figure><h3>Configure Hotkeys</h3><p>Once you‚Äôre in general settings, click the ‚Äòconfigure hotkeys‚Äô button. You‚Äôll be taken to chrome settings.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*jfUfSQM2MYCfY0cl0Y_5Pw.gif" /></figure><h3>Once you‚Äôre in the general section, scroll down to the Streamkeys section.</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*8laAvwwhJoYA-UfB0-Gacw.gif" /></figure><h3>Choose Your Keyboard¬†Shortcut</h3><p>Next to ‚ÄòToggle play/pause‚Äô, click on the field that says ‚ÄòType a shortcut‚Äô.</p><p>Then enter your shortcut. I chose ‚Äòoption + p‚Äô as my shortcut.</p><p>Then select ‚ÄòGlobal‚Äô in the next field, this ensures that the shortcut will work even if chrome is not your active¬†window.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/1*OZxnNNib_W9MPR2Xj8PGKg.gif" /></figure><h3>Restart Chrome</h3><p>Restart chrome and you‚Äôre good to¬†go!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b747029f9f4a" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a pagination based infinite scroll as a beginner‚Ää‚Äî‚Ääon the backend.]]></title>
            <link>https://berellevy.medium.com/making-a-pagination-based-infinite-scroll-as-a-beginner-on-the-backend-753a7d93aaff?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/753a7d93aaff</guid>
            <category><![CDATA[sql]]></category>
            <category><![CDATA[pagination]]></category>
            <category><![CDATA[rails]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[infinite-scroll]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Mon, 26 Oct 2020 00:55:39 GMT</pubDate>
            <atom:updated>2020-10-26T00:55:39.401Z</atom:updated>
            <content:encoded><![CDATA[<h3>Making a pagination based infinite scroll as a beginner‚Ää‚Äî‚Ääon the¬†backend.</h3><p>This is not a definitive guide and it‚Äôs also not optimal, however, it works and it explains the concept¬†well.</p><p>Tech stack: Ruby on Rails for the backend, React and Redux on the frontend (stay¬†tuned).</p><p>Note: cursor based navigation is better, but I‚Äôve only just learned about it, so when I implement it, I‚Äôll write a post about¬†it.</p><p>The first thing we need to do is paginate the data on the back end. (paginate = divide the data up into¬†pages.)</p><p>so when our posts controller requests an index of posts from model, it needs to specify which page it¬†wants.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2e9cc3b9d9478eb165f882ef1f385536/href">https://medium.com/media/2e9cc3b9d9478eb165f882ef1f385536/href</a></iframe><p>The model receives this request and needs to know one more thing, how many items to display per page. For now we‚Äôll keep that hardcoded.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1410d6968ea43863617f9561143f7fcd/href">https://medium.com/media/1410d6968ea43863617f9561143f7fcd/href</a></iframe><p>Let‚Äôs explain some of the code¬†above.</p><p>line 2. page_qty = 5 sets the amount of items each ‚Äòpage‚Äô¬†has.</p><p>Line 3. offset = page_num * page_qty is how we‚Äôll tell our database exactly which record to begin with. I‚Äôll explain this in detail in the next two lines of¬†code.</p><p>Line 4. There‚Äôs a lot happening on line 4, I‚Äôll assume you are familiar with Rails‚Äô sql methods and I‚Äôll explain what each one accomplishes in our context. One important point that I‚Äôll make here is that chaining multiple sql methods still results in <em>one sql query. </em>That‚Äôs one of the great advantages of Rails‚Äô sql query methods. now let‚Äôs break it¬†down.</p><p>Post.order(updated_at:¬†:desc): creates a sql query that looks something like¬†this:</p><pre>SELECT &quot;posts&quot;.* FROM &quot;posts&quot; ORDER BY &quot;posts&quot;.&quot;updated_at&quot; DESC</pre><p>pretty neat,¬†no?</p><p>.where(user_id: followees_ids): A little background here, the followees_ids method returns an array of ids of users that our <em>current user follows</em> which is his feed, by definition. This is probably not the best way to make the query, but it works, and it illustrates an important point; that you can pass an array of values to the where method. This is super cool and our sql query is now changed, and it looks like¬†this:</p><pre>SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN ($1, $2) ORDER BY &quot;posts&quot;.&quot;updated_at&quot; DESC</pre><p>Passing an array to the where method causes the WHERE clause to use IN () rather than =. In the example above, I passed an array containing two¬†items.</p><p>.limit(page_qty): This is where the pagination starts to happen, we tell the database that we only want 5 records at a¬†time.</p><pre>SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN ($1, $2) ORDER BY &quot;posts&quot;.&quot;updated_at&quot; DESC LIMIT $3</pre><p>As you probably realized, the $3 placeholder contains the number 5. If we stop here, the database would only send us the first 5 records. How do we tell the database to send us the <em>next</em> 5¬†records?</p><p>.offset(offset): This last method tells our database where to start. Remember, on line 3. offset = page_num * page_qty and page_qty always means 5, so let‚Äôs visualize some examples.</p><pre>offset = 0 * 5 # page 0 - records 0 through 4.<br>offset = 1 * 5 # page 1 - records 5 through 9.<br>offset = 2 * 5 # page 2 - records 10 through 14.<br>etc.</pre><p>so now we‚Äôve simplified our so that our frontend just need to send the page number to communicate which ‚Äòpage‚Äô of posts we¬†want.</p><p>In the next blog post, I‚Äôll show you how I crafted the frontend to a. know when the user scrolls to the bottom of the page, and b. send for the next ‚Äòpage‚Äô of¬†results.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=753a7d93aaff" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Closure in Javascript]]></title>
            <link>https://berellevy.medium.com/closure-in-javascript-d04fe11d81c3?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/d04fe11d81c3</guid>
            <category><![CDATA[closure]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[first-class-function]]></category>
            <category><![CDATA[lexical-scope]]></category>
            <category><![CDATA[closures-functions]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Sun, 18 Oct 2020 19:10:16 GMT</pubDate>
            <atom:updated>2020-10-18T19:10:16.195Z</atom:updated>
            <content:encoded><![CDATA[<p>what is closure? There‚Äôs a short answer and a long¬†answer.</p><p>The short answer is: read the long¬†answer.</p><h3>Long Answer</h3><p>You know how variables declared inside a function disappear once the function is done? Weeeellll‚Ä¶ that doesn‚Äôt always happen. and here‚Äôs¬†why.</p><h3>You‚Äôre dead if nobody knows¬†you</h3><p>first let‚Äôs understand why those variables disappear. JavaScript has something called garbage collection. Garbage collection is a very descriptive and un-technical name for the rules JavaScript follows to free up memory used by variables. One of the rules of garbage collection is that once a variable is not referenced by any other code it is trashed, well, removed from memory, but ‚Äòtrashed‚Äô has more emotion. The life of a variable is fickle,¬†indeed.</p><p>we might now be able to understand why variables defined inside a function will disappear once the function is done. Since no other code has access to that inner scope, we can assume that no other code references that variable.</p><p>We can also make a nice, simple rule and assume that there is no way any code outside a function can ever reference a variable inside a function, right?¬†Right???</p><h3>Wrong.</h3><p>Let‚Äôs remember two other quirks that come with our beloved JavaScript; Lexical Scope and First-Class Functions. While we won‚Äôt deep dive into these concepts right now, let‚Äôs try to summarize them accurately.</p><ol><li>Lexical scope: Functions have access to variables defined in their outer¬†scope.</li><li>First-Class Functions: Function definitions (and uninvoked ones at that!) can be passed around like regular¬†data.</li></ol><p>Suppose we define a function, let‚Äôs name it¬†mommy,</p><pre>function mommy() {<br>  <br>}</pre><p>Inside this function we define another function, we‚Äôll name it¬†baby,</p><pre>function mommy() {<br>  <strong>const baby = () =&gt; {<br>    console.log(&#39;kick!&#39;)<br>  }</strong><br>}</pre><p>But we don‚Äôt invoke baby, instead, we return this inner function from the outer function.</p><pre>function mommy() {<br>  const baby = () =&gt; {<br>    console.log(&#39;wah!&#39;)<br>  }<br>  <strong>return baby</strong><br>}</pre><p>So now, when we assign the return value of the mommy function to a new variable, let‚Äôs call it baby as¬†well,</p><pre>function mommy() {<br>  const baby = () =&gt; {<br>    console.log(&#39;wah!&#39;)<br>  }<br>  return baby<br>}</pre><pre><strong>let baby = mommy()</strong></pre><p>Why? because the return value of mommy is the ‚Äòbaby‚Äô function definition. so this new variable outside of mommy contains the function that was defined inside of¬†mommy.</p><pre>function mommy() {<br>  const baby = () =&gt; {<br>    console.log(&#39;wah!&#39;)<br>  }<br>  return baby<br>}</pre><pre>let baby = mommy()<br><strong>baby()<br>// -&gt; &#39;wah!&#39;</strong></pre><p>Suppose, before we defined baby, we defined another variable name ‚Äòa‚Äô, and we assigned it the value of¬†0.</p><pre>function mommy() {<br> <strong> let a = 0</strong><br>  const baby = () =&gt; {<br>    console.log(<strong>a</strong>)<br>  }<br>  return baby<br>}</pre><pre>let baby = mommy()</pre><p>Quick question, does baby have access to this variable? yes. one more question, when we return the baby function from the mommy, and assign it to a variable that is outside of mommy, does it still have access to the a variable a defined inside mommy??¬†YES.</p><pre>function mommy() {<br>  let a = 0<br>  const baby = () =&gt; {<br>    console.log(a)<br>  }<br>  return baby<br>}</pre><pre>let baby = mommy()<br>baby()<br><strong>// -&gt; 0<br>// ü§Ø</strong></pre><p>One last question, suppose, inside our baby function, we made changes to the variable ‚Äòa‚Äô that is inside mommy, would those changes stick around even if we call baby once it‚Äôs outside mommy?? Would they¬†stick???</p><pre>function mommy() {<br>  let a = 0<br>  const baby = () =&gt; {<br>    console.log(a)<br>   <strong> a++</strong><br>  }<br>  return baby<br>}</pre><pre>let baby = mommy()<br>baby()<br>// -&gt; 0<br><strong>baby()<br>// -&gt; 1</strong></pre><p>Yes, yes! A thousand times¬†yes!</p><p>That mind twister is closure. Since the baby function has access to the variable ‚Äòa‚Äô and references it, the garbage collector doesn‚Äôt trash it! and the mommy function doesn‚Äôt finish running. Our baby now has access to the variable a for as long as baby is alive. baby can call it, change it and play with it as much as we like. If you think of assigning the return value of mommy to a variable as birth, you can think of closure as not cutting the umbilical cord.</p><h3>Why ever use closure???</h3><p>The first reason is that once you are comfortable with closure it becomes a great tool to encapsulate functionality in a concise¬†way.</p><p>The second reason is that it makes you look smart and the technical job market is getting very competitive. demand for a product or service usually increases before the supply increases, then the supply catches up to demand, and then supply surpasses demand. At first there was a strong demand for coders, and there weren‚Äôt enough of us, then bootcamps exploded all over the place and there were enough coders, then of course along the way everybody heard that coding is a great profession so now everyone and their cousin wants to be a coder, so there are too many coders. We need to differentiate ourselves, first by writing blogs to show that we are passionate, then by using closure to show that we are smart, then writing blogs about closure to show that we are smart, passionate, and just a little sarcastic too.</p><p>I hope this blog had you giggling, or smirking, or even rolling your eyes, because remember, you‚Äôre dead if nobody knows¬†you.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d04fe11d81c3" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introducing FauxMeaux 2.0 (patent pending)]]></title>
            <link>https://berellevy.medium.com/introducing-fauxmeaux-2-0-patent-pending-6b1a14584ab3?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/6b1a14584ab3</guid>
            <category><![CDATA[linkedin]]></category>
            <category><![CDATA[social-media]]></category>
            <category><![CDATA[social-media-marketing]]></category>
            <category><![CDATA[facebook]]></category>
            <category><![CDATA[advertising]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Tue, 29 Sep 2020 20:37:04 GMT</pubDate>
            <atom:updated>2020-09-29T20:41:36.751Z</atom:updated>
            <content:encoded><![CDATA[<p>I am very excited to introduce a new concept in social media advertising that will benefit all parties involved.</p><h3>The Problem: Ads¬†suck</h3><p>Social media ads are disliked by most users. this is an unvalidated claim that I‚Äôm nevertheless comfortable making. A user scrolling through their feed has little or no interest in seeing ads. Additionally, an ad today will be disguised as a post or a tweet, with only a small indication that its promoted or sponsored.</p><h3>The Solution: FauxMeaux 2.0</h3><p>The concept is so simple, every nth post is <em>covered</em> by an ad. to get to the post you simply need tap or click on the ad, thi makes the ad go away, and now you can view the post. There are many positive implications to this¬†method.</p><p>To get a better feel for the experience, please watch this¬†video.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fwn-k1jUmqWA%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dwn-k1jUmqWA&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/e8949c0ff29f5c61f71e8e48be76e81b/href">https://medium.com/media/e8949c0ff29f5c61f71e8e48be76e81b/href</a></iframe><p>I will go through them by showing the problems they¬†solve.</p><h3>Problem: Users have mostly negative associations with¬†ads.</h3><p><strong>Solution:</strong> There are at least two positive associations from tapping the ad to see the¬†post;</p><ol><li>The satisfaction of cleaning up garbage by getting rid of the¬†post.</li><li>The joy of uncovering a surprise. The user knows that beneath every ad lies the sweet surprise of a hidden¬†post.</li></ol><h3>Problem: Users don‚Äôt like¬†ads.</h3><p><strong>Solution:</strong> tap them and they go¬†away!</p><h3>Problem: Social media companies must track user activity to gain insight on their preferences.</h3><p><strong>Solution:</strong> Users are motivated to interact with¬†ads,</p><h3>Problem: Gauging user sentiment towards ads is very difficult.</h3><p><strong>Solution:</strong> Users are highly motivated to interact with ads, therefore, it‚Äôs not a stretch to offer some options like üëç and ‚Äòdon‚Äôt show this ad¬†again‚Äô.</p><h3>Problem: Ads are disguised as¬†posts.</h3><p><strong>Solution:</strong> Now, since users want to uncover the post beneath the ad, there is no longer a need to disguise them, in fact users will now be excited to see ads because they know there is a sweet surprise waiting for them¬†beneath.</p><h3>Problem: Users have no motivation to interact with¬†ads.</h3><p><strong>Solution:</strong> There is a post waiting for you under this ad‚Ä¶¬†tap!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6b1a14584ab3" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Converting to Polymorphism]]></title>
            <link>https://berellevy.medium.com/converting-to-polymorphism-ca2f336a9e2a?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/ca2f336a9e2a</guid>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Wed, 19 Aug 2020 13:03:21 GMT</pubDate>
            <atom:updated>2020-08-19T13:03:21.998Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Rl6DFYrhn1iwNWFnvPCbHw.jpeg" /><figcaption>sorry</figcaption></figure><p>For my Mod 3 project, I made an eCommercesque app. when I got to the stretch goal of adding purchasing capability, I noticed that my join table for items and purchases was identical to my join table for item and cart. additionally, whenever I would need to create a purchaseItem, I would have to also destroy the corresponding CartItem.</p><p>This got me thinking, what if I just made the cartItem polymorphic?</p><p>my schema looks something like:</p><pre>Cart -&lt; CartItem &gt;- Item</pre><p>My purchase would look¬†like:</p><pre>Purchase -&lt; PurchaseItem &gt;- Item</pre><p>I won‚Äôt go into too much detail, but I began to realize that <em>Purchase</em> would share many methods with <em>Cart</em>, and <em>PurchaseItem</em> would share all the methods with CartItem. More than that, I realized that when I created a purchase out of a cart, I would be deleting the <em>CartItems</em> while creating the new PurchaseItems. So, why not use CartItems for purchases as well? Then I would be able to just switch the cartItem from referencing the cart to referencing the purchase, instead of needing to delete the existing cartItem while also making a new purchaseItem</p><p>To do so, the cart/purchase reference field in cartItems would need be polymorphic</p><p>What is Polymorphism?</p><p>Well, CartItem is a join table. On one end, CartItem joins to Item, on the other end, CartItem joins to Cart, <em>or purchase.</em> Huh? that‚Äôs right, every cartitem can can reference a cart or a purchase.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*BistbNGyRWSrbaNg0TSCzg.jpeg" /><figcaption>Disney all rights¬†reserved</figcaption></figure><p>How do you do¬†that?</p><p>Short version: replace the cart_id field in cartitem with two fields, itemable_id and itemable_type. itemable means ‚Äòcan be referenced by an item‚Äô, the name of the table referenced goes in itemable_type.</p><p>Next, use the gifts bequeathed to us by ApplicationRecord to make expoliting that relationship a¬†breeze.</p><p>Long version: implement it!</p><p>First let‚Äôs add the polymorphic field to our model. Let‚Äôs generate a migration, which should look like¬†this:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/c6cc2f47f98b4a14723936932f9960a6/href">https://medium.com/media/c6cc2f47f98b4a14723936932f9960a6/href</a></iframe><p>Now cart Item can be related to any other model/table. so for the big picture some validation here would be in¬†order.</p><p>now to add the methods to cart and¬†purchase</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/14292f7ac85c472cd0a2bb561c788892/href">https://medium.com/media/14292f7ac85c472cd0a2bb561c788892/href</a></iframe><p>See, the methods are exactly the¬†same!</p><p>Since this app is and will always be, in dev, I just need to remove the seed data before I could remove my cart. However, in production you would need to migrate the data from cart_id to itemable_id (and set itemable_type to ‚ÄòCart‚Äô). The method would look something like¬†this:</p><pre>CartItem.all.each do |ci|<br>  ci.itemable = ci.cart<br>  ci.save<br>end</pre><p>once your data has been migrated you can now safely delete the cart_id field from cartItem. See the code below hosted with Unicode U+2764 Ô∏è U+FE0F by¬†github.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/eb4a1bc00dbed6f01e6aac014c7d84b6/href">https://medium.com/media/eb4a1bc00dbed6f01e6aac014c7d84b6/href</a></iframe><p>once this change is made TEST ALL YOUR METHODS IN CART AND CARTITEM. this is a huge change, so start with the most basic methods and work your way¬†up.</p><p>In our case, All of our Cart methods still work, since cart still knows cartitem as cartitem, and cartitem doesn‚Äôt have any methods that call on cart, so we are good¬†there.</p><p>now to write the code to create the purchase.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/372b35a52ced184e3b42939c2c779a86/href">https://medium.com/media/372b35a52ced184e3b42939c2c779a86/href</a></iframe><p>Lines 5 thru 7 do the lifting, and as you can see, it‚Äôs not that¬†heavy.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ca2f336a9e2a" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[When is a Tree Not a Tree?]]></title>
            <link>https://berellevy.medium.com/when-is-a-tree-not-a-tree-374f3f8de7c9?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/374f3f8de7c9</guid>
            <category><![CDATA[node]]></category>
            <category><![CDATA[trees]]></category>
            <category><![CDATA[dom]]></category>
            <category><![CDATA[elements]]></category>
            <category><![CDATA[html]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Mon, 27 Jul 2020 14:48:45 GMT</pubDate>
            <atom:updated>2020-07-28T13:45:56.766Z</atom:updated>
            <content:encoded><![CDATA[<h3>When it‚Äôs the DOM, and you‚Äôre a beginner.</h3><p>Struggling to understand the DOM? It‚Äôs not your fault, you‚Äôre being taught¬†wrong.</p><p>Calling the DOM a tree is accurate, once you are familiar with the DOM and trees, not the green leafy kind that you don‚Äôt see in the city, but the tree data structure. But trying to explain the DOM to beginners as a tree is foolish, and a colossal waste of¬†time</p><p>You see, as a beginner, being told that the DOM is a tree makes no sense and there are many ways that calling the DOM a tree makes it actually harder to understand.</p><p>Here‚Äôs why.</p><h3>An Upside Down¬†Tree</h3><figure><img alt="st. barnabas umc tree damage" src="https://cdn-images-1.medium.com/max/1024/1*PzcUo84k3D91xGdX68pRvQ.jpeg" /><figcaption><a href="https://www.ctcumc.org/newsdetail/669469">https://www.ctcumc.org/newsdetail/669469</a></figcaption></figure><p>It starts with being told that it‚Äôs really an upside down tree, with the trunk, as the document object, being the ‚Äòtop‚Äô of the tree. Well, for most people, an upside down tree is not a thing, and let‚Äôs be thankful.</p><h3>What‚Äôs a¬†Node??</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/359/1*SMCGf3DEstu52J79KJn9pg.jpeg" /><figcaption>This tree‚Äôs got a bad case of the¬†nodes.</figcaption></figure><p>Then we‚Äôre told about <strong>nodes</strong> on the DOM tree, and that they are like the branches. honestly, as a beginner, nodes sounded to me like an ugly parasitic growth a tree was unfortunate to have. it didn‚Äôt sound like branches at¬†all.</p><h3>A Tree Within a¬†Tree?</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/450/1*XdXT_L6sI7559ZCa1XW1zA.jpeg" /><figcaption><a href="http://www.toxel.com/inspiration/2015/09/25/tree-within-a-tree/">http://www.toxel.com/inspiration/2015/09/25/tree-within-a-tree/</a></figcaption></figure><p>The last straw was when I was told that nodes contain other nodes. ok that‚Äôs enough, tree branches don‚Äôt live inside other tree branches, they branch off them, <em>outside</em>. I did however, find this curiosity on my google journey, a bar inside a tree. <a href="https://mymodernmet.com/sunland-big-baobab-tree-bar/">https://mymodernmet.com/sunland-big-baobab-tree-bar/</a></p><p>By the way, I recommend you <strong>don‚Äôt</strong> google ‚Äòtree inside a tree‚Äô, some of the first results are horrifying.</p><h3>Let‚Äôs Try Something Else</h3><p><strong>The Box¬†Model</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/1*qQ2-urNGFpbNTD6S8jD5YQ.jpeg" /></figure><p>I think the DOM is best explained as a big rectangle. Inside this rectangle, we can put text, pictures, or crucially, more rectangles. Guess what we can put inside those rectangles, that‚Äôs right! Text, images and <em>more </em>rectangles<em>.</em></p><p>Now, the rectangles themselves are invisible, but you can add margins and padding around the¬†edges.</p><p>let‚Äôs build a simple webpage to illustrate.</p><p>here‚Äôs what our webpage looks like at¬†first:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*BOov9GZSw4Qkjlwe2-9NPg.png" /><figcaption>This caption is below the¬†image</figcaption></figure><p>Nothing there? let‚Äôs add a border to the very first rectangle.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*n0pkBjJ93y-Gg1OPXlASGg.png" /></figure><p>We actually added two borders, one around the <em>HTML</em> rectangle, and another around the <em>body</em> rectangle. Notice that I didn‚Äôt call them nodes, you‚Äôre¬†welcome.</p><h3>It‚Äôs All Rectangles.</h3><p>Everything you add to your webpage is a rectangle. The header? Rectangle. Paragraphs? Rectangle. List? List item? Image? Span? Paragraph? Rectangle. Rectangle. Rectangle. Rectangle. Rectangle. Rectangle. Rectangle. Rectangle.</p><p>Take a look at what I‚Äôve done to the web page¬†now.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xxELEJp3dJrdMYfRjbo08Q.png" /></figure><p>Nothing much to look at, just some snarky content like every other hastily conceived coding article on the internet.</p><p>but wait, what‚Äôs happening in this¬†gif?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*l2_00tLZrQa4rjBVbe9mBQ.gif" /><figcaption>My cute¬†boxifier</figcaption></figure><p>Cool, no? All I did was add some borders and margins to each rectangle and now you can clearly see each on¬†clearly.</p><h3>So Here‚Äôs My¬†Point.</h3><p>When you hear ‚ÄòDOM‚Äô, think rectangle with stuff in it. When you hear ‚Äònode‚Äô, ‚Äòelement‚Äô or ‚Äòtag‚Äô, think rectangle with stuff in¬†it.</p><p>you can add backgrounds to these rectangles, you can round their corners until they look like a circle. but deep down, they will always remain, rectangles within rectangles within rectangles within rectangles within rectangles within rectangles within rectangles within rectangles within rectangles within rectangles within rectangles within rectangles. And they have stuff (text, images, more rectangles ü§Ø, etc.) inside¬†them.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=374f3f8de7c9" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Biting Both Ends of the Login Sandwich]]></title>
            <link>https://berellevy.medium.com/biting-both-ends-of-the-login-sandwich-d6a341aebc08?source=rss-146d214c3779------2</link>
            <guid isPermaLink="false">https://medium.com/p/d6a341aebc08</guid>
            <category><![CDATA[rails]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[login]]></category>
            <category><![CDATA[dual]]></category>
            <category><![CDATA[auth]]></category>
            <dc:creator><![CDATA[Berel Levy]]></dc:creator>
            <pubDate>Thu, 09 Jul 2020 13:25:43 GMT</pubDate>
            <atom:updated>2020-07-09T13:42:31.032Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/612/1*SOpg-icwSwYg0pPPNzz8RA.jpeg" /></figure><p>I‚Äôll jump right in to a description of my first tango with setting up dual UIs in a single rails¬†app.</p><p>The app is a barebones food ordering app inspired by grubzhlub or stretchmarks</p><p>This can be accomplished in 4 steps. Let‚Äôs take a quick look at¬†them.</p><ol><li>Add a login, includes login form, path, and controller method.</li><li>Configure our app to allow a restaurant session.</li><li>Address shared¬†paths</li><li>Restricting paths only available to one login¬†type.</li></ol><h3>Add a¬†Login</h3><p>Our new user type, restaurant, can share login pages with the original user type which is, ahem, called user. We just have to add a¬†form.</p><p>Add the following code to app/views/sessions/login.html.erb</p><pre>&lt;%= form_for :session, url: &quot;/sessions/restaurant&quot; do |f| %&gt;</pre><pre>  &lt;%= f.label :username %&gt;<br>  &lt;%= f.text_field :username %&gt;</pre><pre>  &lt;%= f.label :password %&gt;<br>  &lt;%= f.text_field :password %&gt;</pre><pre>  &lt;%= f.submit &quot;login&quot; %&gt;</pre><pre>&lt;% end %&gt;</pre><p>notice the new path on line one. let‚Äôs add that path to routes.rb</p><pre>post &#39;/sessions/restaurant&#39;, to: &#39;sessions#create_restaurant&#39;, as: &#39;create_restaurant&#39;</pre><p>now add the #create_restaurant method to the sessions controller:</p><pre>class SessionsController &lt; ApplicationController<br>  ...</pre><pre>  def create_user<br>    ...<br>  end</pre><pre>  <strong># new login method for restaurant (identical to create_user)<br></strong>  def create_restaurant<br>    restaurant = Restaurant.find_by(username: params[:session[:username])<br>    if !restaurant<br>      flash[:error] = &quot;Restaurant not found&quot;<br>      redirect_to new_login_path<br>    elsif restaurant.authenticate(params[:session][:password])<br>      session[:restaurant_id] = restaurant.id<br>      redirect_to restaurant_path(restaurant)<br>    else<br>      flash[:error] = &quot;Password incorrect&quot;<br>      redirect_to new_login_path<br>    end</pre><pre>end</pre><p>supposing correct credentials we‚Äôre faced with two issues when redirecting to restaurant_path(restaurant).</p><ol><li>our app is set up to check for a user (sessions[:user_id) ]in the cookies, not a restaurant(sessions[:restaurant_id]). thankfully, this problem only has to be fixed¬†once.</li><li>restaurant_path(restaurant) takes us to the restaurant show page that the user would see and is not suited for the restaurant user¬†type.</li></ol><h3>Configure our app to allow restaurant sessions</h3><p>To fix our first problem, let‚Äôs make a small change to the set_user method in the application controller.</p><pre>class ApplicationController &lt; ActionController::Base<br>  ...</pre><pre>  def set_user<br>    <strong>if session[:user_id]  # =&gt; new!</strong><br>      @current_user = User.find_by(id: session[:user_id]) <br>    <strong>elsif session[:restaurant_id]<br>      @current_restaurant = Restaurant.find_by(id: session[:restaurant_id])  # =&gt; new!<br>    end  # =&gt; new!</strong><br>  end</pre><pre>  def auth_user<br>  ...<br>  end<br>end</pre><h3>Addressing Shared¬†Paths</h3><p>we can fix our second problem in restaurants_controller#show by changing the variables and the view template¬†.</p><pre>class RestaurantsController &lt; ApplicationController<br>  ...</pre><pre>  def show<br>    if session[:user_id]<br>      <strong># variables for the user</strong><br>      @restaurant = Restaurant.find(params[:id])<br>      @items = @restaurant.items<br>      @new_order = Order.new(restaurant: @restaurant)<br><strong>      # renamed template for the user<br>      </strong>render &#39;show_for_user&#39;<br>    elsif session[:restaurant_id]<br>      <strong># new variables for the restaurant</strong><br>      @restaurant = Restaurant.find(session[:restaurant_id])<br>      @items = @restaurant.items<br>      @open_orders = @restaurant.open_orders<br>      <strong># new template for the restaurant<br>      </strong>render &#39;show_for_restaurant&#39;<br>    end<br>  end</pre><pre>end</pre><p>our new show_for_restaurant template will contain all the functionality we want to provide our restaurant and there is no way for the user to access that template. This solution can be applied to any path that is shared by the restaurant and¬†user.</p><h3>Restricting Paths that are Only Available to one Login¬†Type</h3><p>Our final step is to restrict our restaurant from viewing user specific pages and vice versa, for example, the user edit¬†page.</p><p>Let‚Äôs address this in two¬†places.</p><ol><li>Set the login_path to check for for user and restaurant in the session¬†hash.</li></ol><pre>class SessionsController &lt; ApplicationController<br>  ...<br>  <br>  def login<br>    if session[:user_id]<br>      <strong># existing redirect if user logged in<br>   </strong>   redirect_to user_path(session[:user_id])<strong><br>    </strong>elsif session[:restaurant_id]<br>      <strong># new redirect if restaurant is logged in<br></strong>      redirect_to restaurant_path(session[:restaurant_id])<br>  end</pre><pre>end</pre><p>Our login path is now a convenient redirecting tool that we can use to redirect either user or restaurant in case one of them tries to access any forbidden page.</p><p>2. Placing the restriction.</p><p>Suppose our restaurant tries to access a users edit page by pasting the link directly into the browser, we can just add the following code to user_controller#edit:</p><pre>class UsersController &lt; ApplicationController<br>  ...</pre><pre>  def edit<br>    @user = User.find_by(id: params[:id])<br>    <strong>#prevent all but the current user from accessing the edit page<br></strong>    return redirect_to new_login_path unless @user == @current_user<br>  end</pre><pre>end</pre><p>since our login path will detect our user type for us, it will also work if a user from directly pasting another user‚Äôs url into the browser to nefariously access their edit¬†page.</p><p>Many thanks to Andrew Santos, one of my coaches at Flatiron School for guiding me in this endeavor.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d6a341aebc08" width="1" height="1" alt="">]]></content:encoded>
        </item>
    </channel>
</rss>