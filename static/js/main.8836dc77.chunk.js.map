{"version":3,"sources":["assets/profile_square_small.jpg","assets/Berel_Levy_Resume.docx","icons/GithubLink.js","icons/LinkedInLink.js","icons/MediumLink.js","icons/ResumeLink.js","icons/TwitterLink.js","Pages/Home.js","Components/NavBar.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GithubLink","href","target","rel","icon","faGithub","LinkedInLink","faLinkedinIn","MediumLink","faMedium","ResumeLink","resume","download","TwitterLink","faTwitter","Home","className","style","background","Container","Row","Col","sm","Image","src","RoundProfile","roundedCircle","fluid","padding","maxHeight","color","NavBar","Navbar","expand","bg","NavbarBrand","Nav","Link","disabled","Footer","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,gD,kQCc5BC,EATI,WACjB,OACE,uBAAGC,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBACzD,kBAAC,IAAD,CAAiBC,KAAMC,QCMdC,EATM,WACnB,OACE,uBAAGL,KAAK,yCAAyCC,OAAO,SAASC,IAAI,uBACnE,kBAAC,IAAD,CAAiBC,KAAMG,QCMdC,EATI,WACjB,OACE,uBAAGP,KAAK,gCAAgCC,OAAO,SAASC,IAAI,uBAC1D,kBAAC,IAAD,CAAiBC,KAAMK,Q,iBCIdC,EATI,WACjB,OACE,uBAAGT,KAAMU,IAAQC,UAAQ,GAAzB,uBCMWC,EAPK,WAClB,OAAO,uBAAGZ,KAAK,gCAAgCC,OAAO,SAASC,IAAI,uBACjE,kBAAC,IAAD,CAAiBC,KAAMU,QCqCZC,EA5BF,WACX,OACE,4BAAQC,UAAU,sBAAsBC,MAAO,CAACC,WAAY,YAC1D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKJ,UAAU,sBACb,kBAACK,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAOC,IAAMC,IAAeC,eAAa,EAACC,OAAK,EAACV,MAAO,CAACW,QAAS,KAAMC,UAAW,QAEpF,kBAACR,EAAA,EAAD,KACI,8CACA,iFACA,yCACa,uBAAGJ,MAAO,CAACa,MAAO,WAAY7B,KAAK,8BAAnC,wBAEb,6BACE,kBAAC,EAAD,MADF,MACmB,kBAAC,EAAD,MADnB,MACsC,kBAAC,EAAD,MADtC,MACuD,kBAAC,EAAD,MADvD,MACwE,kBAAC,EAAD,Y,wBCPvE8B,EAhBA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,SACnB,kBAACf,EAAA,EAAD,KACE,kBAACgB,EAAA,EAAD,sBACA,kBAACC,EAAA,EAAD,CAAKpB,UAAU,WACb,kBAACoB,EAAA,EAAIC,KAAL,CAAUpC,KAAK,QAAQqC,UAAQ,GAA/B,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUpC,KAAK,SAASqC,UAAQ,GAAhC,SACA,kBAACF,EAAA,EAAIC,KAAL,CAAUpC,KAAK,WAAUqC,UAAQ,GAAjC,eCEGC,G,MAZA,WACb,OACE,4BAAQC,MAAM,UACZ,kBAACrB,EAAA,EAAD,KACE,wDACA,uBAAGlB,KAAK,8BAAR,2BCQOwC,MAVf,WACE,OACE,yBAAKzB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8836dc77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_square_small.8fb0fc68.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Berel_Levy_Resume.0505e3e6.docx\";","import { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React from 'react'\n\n\nconst GithubLink = () => {\n  return (\n    <a href=\"https://github.com/berellevy\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <FontAwesomeIcon icon={faGithub} />\n    </a>\n  )\n}\n\n\nexport default GithubLink","import { faLinkedinIn } from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React from 'react'\n\n\nconst LinkedInLink = () => {\n  return (\n    <a href=\"https://www.linkedin.com/in/berellevy/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <FontAwesomeIcon icon={faLinkedinIn} />\n    </a>\n  )\n}\n\n\nexport default LinkedInLink","import { faMedium } from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React from 'react'\n\n\nconst MediumLink = () => {\n  return (\n    <a href=\"https://medium.com/@berellevy\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <FontAwesomeIcon icon={faMedium} />\n    </a>\n  )\n}\n\n\nexport default MediumLink","import React from 'react'\nimport resume from '../assets/Berel_Levy_Resume.docx'\n\nconst ResumeLink = () => {\n  return (\n    <a href={resume} download>\n      Download my resume\n    </a>\n  )\n}\n\n\nexport default ResumeLink","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nconst TwitterLink = () => {\n  return <a href=\"https://twitter.com/BerelLevy\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <FontAwesomeIcon icon={faTwitter} />\n  </a>\n}\n\n\nexport default TwitterLink","import React from 'react'\nimport { Col, Container, Image, Row } from 'react-bootstrap'\nimport RoundProfile from '../assets/profile_square_small.jpg'\nimport GithubLink from '../icons/GithubLink'\nimport LinkedInLink from '../icons/LinkedInLink'\nimport MediumLink from '../icons/MediumLink'\nimport ResumeLink from '../icons/ResumeLink'\nimport TwitterLink from '../icons/TwitterLink'\n\nconst jStyle = {\n  color: \"#444763\",\n  background: \"#D2D8DF\",\n  margin: \"5%\" \n}\n\nconst Home = () => {\n  return (\n    <header className=\"masthead text-white\" style={{background: \"#4B4E6D\"}}>\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col sm=\"4\">\n            <Image src={ RoundProfile } roundedCircle fluid style={{padding: \"5%\", maxHeight: 300}}/>\n          </Col>\n          <Col >\n              <h3>Hey, I'm Berel</h3>\n              <p>I'm a fullstack developer looking for a challenge.</p>\n              <p>\n                Reach out! <a style={{color: \"#C3CBD4\"}} href=\"mailto:berel@berellevy.com\">berel@berellevy.com</a>\n              </p>\n              <div >\n                <TwitterLink/> | <LinkedInLink /> | <GithubLink /> | <MediumLink /> | <ResumeLink />\n              </div>\n          </Col>\n\n        </Row>\n\n      </Container>\n    </header>\n\n  )\n}\n\n\nexport default Home","import React from 'react'\n\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavbarBrand from 'react-bootstrap/NavbarBrand'\nimport Nav from 'react-bootstrap/Nav'\nimport { Container } from 'react-bootstrap'\n\nconst NavBar = () => {\n  return (\n    <Navbar expand=\"xl\" bg=\"light\">\n        <Container>\n          <NavbarBrand>berellevy.com</NavbarBrand>\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"/home\" disabled >Home</Nav.Link>\n            <Nav.Link href=\"/about\" disabled >About</Nav.Link>\n            <Nav.Link href=\"/contact\"disabled >Contact</Nav.Link>\n          </Nav>\n        </Container>\n    </Navbar>\n  )\n}\n\n\nexport default NavBar","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport '../css/footer.css'\n\n\nconst Footer = () => {\n  return (\n    <footer class=\"footer\">\n      <Container>\n        <p>Copywrong 2020 Berel Levy</p>\n        <a href=\"mailto:berel@berellevy.com\">berel@berellevy.com</a>\n      </Container>\n    </footer>\n  )\n}\n\n\nexport default Footer","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Home from './Pages/Home';\nimport NavBar from './Components/NavBar';\nimport Footer from './Components/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <NavBar />\n        <Home/>\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}